<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>it on 低质量随笔</title>
    <link>https://kyzy540.github.io/tags/it/</link>
    <description>Recent content in it on 低质量随笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Mar 2023 20:26:29 +0800</lastBuildDate><atom:link href="https://kyzy540.github.io/tags/it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扩展插件SwitchyOmega</title>
      <link>https://kyzy540.github.io/post/extend_switchyomega/</link>
      <pubDate>Thu, 30 Mar 2023 20:26:29 +0800</pubDate>
      
      <guid>https://kyzy540.github.io/post/extend_switchyomega/</guid>
      <description>背景 SwitchyOmega是著名Chrome代理插件，源代码开源在GitHub，最近release是2018年8月
它很健全，但算不上完美。截止写本文的2023年3月，GitHub仍有新issue提交，但开发者已经了无音讯
所以当我想对它做改动，只能直接修改源代码，自己制作crx了
需求是: 任意网页上，如果出现了如下span，SwitchyOmega可以一键载入代理服务器的地址和端口
&amp;lt;span id=&amp;#34;proxy&amp;#34; data-profileName=&amp;#39;demo&amp;#39; data-patterns=&amp;#39;[&amp;#34;192.168.*&amp;#34;]&amp;#39;&amp;gt; HTTP://172.168.1.1:8080 &amp;lt;/span&amp;gt; 工作可以拆分成几步
学习Chrome插件基本原理 了解SwitchyOmega如何实现代理功能 确认需求可否实现 学习本地开发和调试 着手实现 我不想发布这个模改的插件，毕竟它仅对个人有用。所以到这就差不多了
对了，我没前端经验，也没开发过Chrome插件
基础知识 Chrome Extension development basics chrome.proxy AngularJS CoffeeScript Building the project 在Chrome插件开发基础中主要了解4个点
插件的主要构成。包含前端、后端、manifest、options 插件前后端通信机制 Chrome代理相关API SwitchyOmega如何基于配置调用Chrome API实现代理 SwitchyOmega代码 76.7% 是 CoffeeScript，用到了AngularJS框架。依赖 NodeJS/npm/Grunt/bower 构建 (build)
SwitchyOmega配置代理流程 下图展示了在SwitchyOmega 选项页面里创建一个 &amp;ldquo;情景模式&amp;rdquo; (代理配置) 是如何生效的
首先，SwitchyOmega本身没实现代理功能。它实现了一套界面，让用户可以方便使用Chrome代理API。Chrome内部完成了具体的代理实现
其次，SwitchyOmega在后台保存了一份核心数据结构options，其会被转译并导入chrome.proxy.settings。SwitchyOmega的前后端设计都围绕着维护options数据结构设计。要实现点击span加载配置，重点就在于搞明白如何将页面数据导入options
本地开发和调试 构建 开发的第一步，是走通原有的构建流程，在Chrome里试用正常。如果参考构建文档，会在 npm run deps 阶段遇到如下报错
bower angular-spectrum-colorpicker#~1.3.5 ECMDERR Failed to execute &amp;ldquo;git ls-remote &amp;ndash;tags &amp;ndash;heads https://github.com/Jimdo/angular-spectrum-colorpicker.git&amp;quot;, exit code of #128 remote: Repository not found.</description>
    </item>
    
    <item>
      <title>VPN Setup</title>
      <link>https://kyzy540.github.io/post/vpnsetup/</link>
      <pubDate>Tue, 18 Oct 2022 09:16:11 +0800</pubDate>
      
      <guid>https://kyzy540.github.io/post/vpnsetup/</guid>
      <description>L2TP L2TP协议是通用VPN协议，包括ios/android/windows/macos等系统原生支持。优点是易搭建易配置，缺点是容易被屏蔽
一键部署脚本和文档: https://github.com/hwdsl2/setup-ipsec-vpn 。核心代码就一段
# All values MUST be placed inside &amp;#39;single quotes&amp;#39; # DO NOT use these special characters within values: \ &amp;#34; &amp;#39; wget https://get.vpnsetup.net -O vpn.sh sudo VPN_IPSEC_PSK=&amp;#39;your_ipsec_pre_shared_key&amp;#39; \ VPN_USER=&amp;#39;your_vpn_username&amp;#39; \ VPN_PASSWORD=&amp;#39;your_vpn_password&amp;#39; \ sh vpn.sh os选ubuntu。不选centos是因其没带 wget ，懒得装。防火墙放行 UDP 500 和 4500 端口。ios的VPN配置类型选 L2TP
建议防火墙屏蔽包括 22(ssh) 在内所有其他端口，避免不必要的安全问题
V2Ray 关于V2Ray，读 V2Ray简介和搭建教程
文章写得很好，我仅补充一点: 文中的安装脚本 (goV2.sh) 在2022年11月7日报错。我仅针对报错修改了一下脚本，可自取
wget https://raw.githubusercontent.com/kyzy540/blogdraft/main/static/scripts/goV2.sh chmod +x goV2.sh sudo ./goV2.sh --version v5.1.0 改动点如下
删除v2ctl 相关代码，v2ctl 在v2ray v5.</description>
    </item>
    
    <item>
      <title>ERROR: Win32Bridge.Server.exe</title>
      <link>https://kyzy540.github.io/post/windows_bridge_server_error/</link>
      <pubDate>Thu, 28 Apr 2022 09:43:39 +0800</pubDate>
      
      <guid>https://kyzy540.github.io/post/windows_bridge_server_error/</guid>
      <description>某次系统升级后一登录就报错
Windows cannot find &amp;lsquo;C:\Program Files\Microsoft.549981C3F5F10_4.2203.4603.0_x64&amp;hellip;\Win32Bridge.Server.exe&amp;rsquo;. Make sure you typed the name correctly, and the try again.
简单来说就是Cortana (小娜)的问题，参考下图在配置里重置就好
参考链接</description>
    </item>
    
    <item>
      <title>微软好终端</title>
      <link>https://kyzy540.github.io/post/windows_terminal/</link>
      <pubDate>Thu, 18 Jun 2020 19:05:59 +0800</pubDate>
      
      <guid>https://kyzy540.github.io/post/windows_terminal/</guid>
      <description>Windows发展到今日，已非复吴下阿蒙。被诟病多年的&amp;quot;终端难用&amp;quot;问题已经有了不错的解决方案。本文分享几个让我受益颇多的工具
在介绍工具前，读者应了解几点知识:
掌握一种常用SHELL，例如bash, 知道终端和SHELL的区别。如果不了解，请读博文 知道cygwin，以及它和Linux/Mac下终端的区别 知道Gnu和Linux/Unix的区别 Powershell Powershell早在Windows7时代就被捆绑在系统内，在当代Windows电脑上基本都能用。我不推荐Powershell，但有时条件受限，不得不依仗它，例如
只能用早期操作系统，例如Windows7 没有Administrator权限，无法添加/关闭系统功能 机器性能贫瘠，跑cygwin都迟钝 SDK或build环境局限于Windows Powershell本身并不差，很多时候用户只因没法在其中使用grep/less/vim等命令，而抱怨不已。但其实这问题有解
GOW (Gnu On Windows)囊获了100+个常用Gnu命令。它开源、免费，只包含一堆EXE文件，大小18MB左右。我日常用到的Gnu命令都在其中
想找出java文件中包含Log关键字最多的前3名？
PS C:\Users&amp;gt; grep -c Log *.java | sort {[int]$_.split(&amp;#34;:&amp;#34;)[1]} -D | head -n 3 A.java:20 B.java:13 C.java:7 其中grep和head来自GOW，sort来自Powershell。如何确定这些命令的来源？
PS C:\Users&amp;gt; which head C: \Program Files (x86)\Gow\bin\grep.EXE PS C:\Users&amp;gt; which head C: \WINDOWS\system32\sort.EXE 有了GOW，Powershell已经能应付简单的终端任务
另外，Powershell支持history，用户可以很方便地用ctrl+r回溯历史命令，这是cmd所不具备的
可选工具 下面介绍的工具可能不适合所有人，只是我比较常用，不装也无妨
choco 是Windows下包管理工具，运行在终端内，类似apt和yum。推荐给爱尝鲜新软件的读者。以安装GOW为例
choco install gow ZLocation 类似autojump，是一款目录导航工具，可以理解为cd命令的补充。它能让用户在常用目录间左右横跳
ripgrep 是更好用的grep，用于文本搜索。我认为其性能和易用性都优于grep。例如下面命令会递归搜索当前目录下 .java和 .properties 文件，找 Log 关键词。rg会自动排查隐藏文件和二进制文件 (.class和.jar)，搜索效率很高
rg -tjava Log jq 是个JSON解析工具，对于经常写脚本解析JSON数据的朋友有帮助</description>
    </item>
    
  </channel>
</rss>
